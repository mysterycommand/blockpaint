{"version":3,"sources":["logo.svg","components/tools/index.tsx","components/loader/index.tsx","components/button/index.tsx","components/icons/paint/index.tsx","components/icons/erase/index.tsx","components/canvas/state.ts","components/canvas/effects.ts","components/canvas/index.tsx","components/workspace/index.tsx","components/splash/index.tsx","components/app/index.tsx","service-worker.ts","index.tsx"],"names":["module","exports","ToolType","Loader","className","Button","children","disabled","onClick","Paint","width","height","viewBox","preserveAspectRatio","xmlns","d","Erase","Tools","currentTool","setCurrentTool","type","id","name","checked","onChange","htmlFor","useCanvasState","canvasRef","fetchPainting","useState","canvasContext","setCanvasContext","canvasRect","setCanvasRect","isPainting","setIsPainting","prevX","setPrevX","prevY","setPrevY","handleMouse","event","preventDefault","buttons","handleTouch","touches","length","paint","clientX","clientY","current","x","y","fillX","fillY","beginPath","moveTo","lineTo","stroke","useEffect","getContext","useCanvasContext","getBoundingClientRect","useCanvasRect","memoizedFetchPainting","useCallback","then","file","data","JSON","parse","img","Image","src","onload","drawImage","useFetchedPainting","strokeStyle","lineWidth","lineCap","lineJoin","useCurrentTool","onMouseEnter","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onTouchStart","onTouchMove","Array","from","reduce","acc","touch","onTouchEnd","Canvas","props","eventHandlers","ref","Workspace","isFetching","isSaving","person","savePainting","signOut","Splash","signIn","logo","alt","appConfig","AppConfig","userSession","UserSession","Boolean","window","location","hostname","match","ReactDOM","render","setIsFetching","setIsSaving","useRef","isSignInPending","handlePendingSignIn","origin","pathname","assign","isUserSignedIn","getFile","decrypt","Promise","resolve","stringify","Person","loadUserData","profile","putFile","toDataURL","createdAt","Date","now","encrypt","signUserOut","redirectToSignIn","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9777754f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.02b2068a.svg\";","import React, { FC } from 'react';\nimport './style.css';\nimport Paint from '../icons/paint';\nimport Erase from '../icons/erase';\n\nexport enum ToolType {\n  Paint = 'paint',\n  Erase = 'erase',\n}\n\ntype ToolsProps = {\n  currentTool: ToolType;\n  setCurrentTool: (tool: ToolType) => void;\n};\n\nconst Tools: FC<ToolsProps> = ({ currentTool, setCurrentTool }) => (\n  <ul className=\"tools\">\n    <li>\n      <input\n        type=\"radio\"\n        id=\"paint\"\n        name=\"tools\"\n        checked={currentTool === ToolType.Paint}\n        onChange={() => setCurrentTool(ToolType.Paint)}\n      />\n      <label htmlFor=\"paint\">\n        <Paint />\n      </label>\n    </li>\n    <li>\n      <input\n        type=\"radio\"\n        id=\"erase\"\n        name=\"tools\"\n        checked={currentTool === ToolType.Erase}\n        onChange={() => setCurrentTool(ToolType.Erase)}\n      />\n      <label htmlFor=\"erase\">\n        <Erase />\n      </label>\n    </li>\n  </ul>\n);\n\nexport default Tools;\n","import React, { FC } from 'react';\nimport './style.css';\n\ntype LoaderProps = {};\n\nconst Loader: FC<LoaderProps> = () => (\n  <div className=\"loader\">\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n);\n\nexport default Loader;\n","import React, { FC, ButtonHTMLAttributes } from 'react';\n\nimport Loader from '../loader';\n\nimport './style.css';\n\ntype ButtonProps = ButtonHTMLAttributes<HTMLButtonElement> & {};\n\nconst Button: FC<ButtonProps> = ({ children, disabled, onClick }) => (\n  <button className=\"button\" onClick={onClick} disabled={disabled}>\n    {children}\n    {disabled && <Loader />}\n  </button>\n);\n\nexport default Button;\n","import React, { FC } from 'react';\nimport '../style.css';\n\ntype PaintProps = {};\n\nconst Paint: FC<PaintProps> = () => (\n  <svg\n    className=\"icon paint\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    preserveAspectRatio=\"xMidYMid meet\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path d=\"M19 20H5a1 1 0 0 0 0 2h14a1 1 0 0 0 0-2zM5 18h.09l4.17-.38a2 2 0 0 0 1.21-.57l9-9a1.92 1.92 0 0 0-.07-2.71L16.66 2.6A2 2 0 0 0 14 2.53l-9 9a2 2 0 0 0-.57 1.21L4 16.91A1 1 0 0 0 5 18zM15.27 4L18 6.73l-2 1.95L13.32 6l1.95-2zm-8.9 8.91L12 7.32l2.7 2.7-5.6 5.6-3 .28.27-2.99z\" />\n  </svg>\n);\n\nexport default Paint;\n","import React, { FC } from 'react';\nimport '../style.css';\n\ntype EraseProps = {};\n\nconst Erase: FC<EraseProps> = () => (\n  <svg\n    className=\"icon erase\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    preserveAspectRatio=\"xMidYMid meet\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path d=\"M19 20H5a1 1 0 0 0 0 2h14a1 1 0 0 0 0-2zm-.009-17.942h-.09l-4.17.38a2 2 0 0 0-1.21.57l-9 9a1.92 1.92 0 0 0 .07 2.71l2.74 2.74a2 2 0 0 0 2.66.07l9-9a2 2 0 0 0 .57-1.21l.43-4.17a1 1 0 0 0-1-1.09zm-10.27 14l-2.73-2.73 2-1.95 2.68 2.68-1.95 2zm8.9-8.91l-5.63 5.59-2.7-2.7 5.6-5.6 3-.28-.27 2.99z\" />\n  </svg>\n);\n\nexport default Erase;\n","import { MouseEvent, TouchEvent, useState } from 'react';\n\nimport { CanvasProps } from './props';\nimport {\n  CanvasContext,\n  CanvasRect,\n  useCanvasContext,\n  useCanvasRect,\n  useFetchedPainting,\n  useCurrentTool,\n} from './effects';\n\nexport function useCanvasState({\n  canvasRef,\n  fetchPainting,\n  currentTool,\n}: CanvasProps) {\n  const [canvasContext, setCanvasContext] = useState<CanvasContext>(null);\n  const [canvasRect, setCanvasRect] = useState<CanvasRect>(null);\n  const [isPainting, setIsPainting] = useState(false);\n  const [prevX, setPrevX] = useState(-1);\n  const [prevY, setPrevY] = useState(-1);\n\n  useCanvasContext({ setCanvasContext, canvasRef });\n  useCanvasRect({ setCanvasRect, canvasRef });\n  useFetchedPainting({ canvasRef, canvasContext, fetchPainting });\n  useCurrentTool({ currentTool, canvasContext });\n\n  function handleMouse(event: MouseEvent<HTMLCanvasElement>) {\n    event.preventDefault();\n    setIsPainting(event.buttons !== 0);\n    setPrevX(-1);\n    setPrevY(-1);\n  }\n\n  function mousePaint(event: MouseEvent<HTMLCanvasElement>) {\n    event.preventDefault();\n    paint(event.clientX, event.clientY);\n  }\n\n  function handleTouch(event: TouchEvent<HTMLCanvasElement>) {\n    // event.preventDefault();\n    setIsPainting(event.touches.length !== 0);\n    setPrevX(-1);\n    setPrevY(-1);\n  }\n\n  function touchPaint(event: TouchEvent<HTMLCanvasElement>) {\n    // event.preventDefault();\n    const touches = Array.from(event.touches);\n\n    // handle multiple touches by averaging them, will sort of draw \"in the\n    // middle\" of all the touches\n    const { clientX, clientY } = touches.reduce(\n      (acc, touch) => ({\n        clientX: acc.clientX + touch.clientX,\n        clientY: acc.clientY + touch.clientY,\n      }),\n      {\n        clientX: 0,\n        clientY: 0,\n      },\n    );\n\n    paint(clientX / touches.length, clientY / touches.length);\n  }\n\n  function paint(clientX: number, clientY: number) {\n    if (\n      !(\n        isPainting &&\n        canvasRef &&\n        canvasRef.current &&\n        canvasContext &&\n        canvasRect\n      )\n    ) {\n      return;\n    }\n\n    const { x, y, width, height } = canvasRect as DOMRect;\n    const fillX = (clientX - x) * (canvasRef.current.width / width);\n    const fillY = (clientY - y) * (canvasRef.current.height / height);\n\n    if (prevX === -1 && prevY === -1) {\n      canvasContext.beginPath();\n    } else {\n      canvasContext.moveTo(prevX, prevY);\n      canvasContext.lineTo(fillX, fillY);\n      canvasContext.stroke();\n    }\n\n    setPrevX(fillX);\n    setPrevY(fillY);\n  }\n\n  return {\n    // mouse event handlers\n    onMouseEnter: handleMouse,\n    onMouseDown: handleMouse,\n    onMouseMove: mousePaint,\n    onMouseUp: handleMouse,\n    onMouseLeave: handleMouse,\n    // touch event handlers\n    onTouchStart: handleTouch,\n    onTouchMove: touchPaint,\n    onTouchEnd: handleTouch,\n  };\n}\n","import {\n  Dispatch,\n  SetStateAction,\n  RefObject,\n  useEffect,\n  useCallback,\n} from 'react';\nimport { ToolType } from '../tools';\n\nexport type CanvasContext = CanvasRenderingContext2D | null;\nexport type CanvasRect = DOMRect | ClientRect | null;\n\nexport function useCanvasContext({\n  canvasRef,\n  setCanvasContext,\n}: {\n  canvasRef: RefObject<HTMLCanvasElement>;\n  setCanvasContext: Dispatch<SetStateAction<CanvasContext>>;\n}) {\n  useEffect(() => {\n    if (!(canvasRef && canvasRef.current)) {\n      return;\n    }\n\n    setCanvasContext(canvasRef.current.getContext('2d'));\n  }, [canvasRef, setCanvasContext]);\n}\n\nexport function useCanvasRect({\n  canvasRef,\n  setCanvasRect,\n}: {\n  canvasRef: RefObject<HTMLCanvasElement>;\n  setCanvasRect: Dispatch<SetStateAction<CanvasRect>>;\n}) {\n  useEffect(() => {\n    if (!(canvasRef && canvasRef.current)) {\n      return;\n    }\n\n    setCanvasRect(canvasRef.current.getBoundingClientRect());\n  }, [canvasRef, setCanvasRect]);\n}\n\nexport function useFetchedPainting({\n  canvasRef,\n  fetchPainting,\n  canvasContext,\n}: {\n  canvasRef: RefObject<HTMLCanvasElement>;\n  fetchPainting: () => Promise<string>;\n  canvasContext: CanvasContext;\n}) {\n  const memoizedFetchPainting = useCallback(fetchPainting, []);\n\n  useEffect(() => {\n    if (!canvasContext) {\n      return;\n    }\n\n    memoizedFetchPainting().then(file => {\n      if (!(canvasRef && canvasRef.current)) {\n        return;\n      }\n\n      const { data } = JSON.parse(file);\n      if (!data) {\n        return;\n      }\n\n      const img = new Image(canvasRef.current.width, canvasRef.current.height);\n      img.src = data;\n      img.onload = () => {\n        canvasContext.drawImage(img, 0, 0);\n      };\n    });\n  }, [canvasRef, canvasContext, memoizedFetchPainting]);\n}\n\nexport function useCurrentTool({\n  currentTool,\n  canvasContext,\n}: {\n  currentTool: ToolType;\n  canvasContext: CanvasContext;\n}) {\n  useEffect(() => {\n    if (!canvasContext) {\n      return;\n    }\n\n    canvasContext.strokeStyle =\n      currentTool === ToolType.Paint ? 'black' : 'white';\n    canvasContext.lineWidth = currentTool === ToolType.Paint ? 4 : 24;\n    canvasContext.lineCap = 'round';\n    canvasContext.lineJoin = 'round';\n  }, [canvasContext, currentTool]);\n}\n","import React from 'react';\n\nimport './style.css';\n\nimport { CanvasProps } from './props';\nimport { useCanvasState } from './state';\n\nexport default function Canvas(props: CanvasProps) {\n  const eventHandlers = useCanvasState(props);\n\n  return (\n    <canvas\n      ref={props.canvasRef}\n      className=\"canvas\"\n      width=\"1080\"\n      height=\"1080\"\n      {...eventHandlers}\n    />\n  );\n}\n","import React, { FC, MouseEvent, RefObject } from 'react';\nimport { Person } from 'blockstack';\n\nimport Button from '../button';\nimport Canvas from '../canvas';\nimport Loader from '../loader';\n\nimport './style.css';\nimport Tools, { ToolType } from '../tools';\n\ntype WorkspaceProps = {\n  canvasRef: RefObject<HTMLCanvasElement>;\n  currentTool: ToolType;\n  fetchPainting: () => Promise<string>;\n  isFetching: boolean;\n  isSaving: boolean;\n  person: Person;\n  savePainting: (event: MouseEvent<HTMLButtonElement>) => void;\n  setCurrentTool: (tool: ToolType) => void;\n  signOut: (event: MouseEvent<HTMLButtonElement>) => void;\n};\n\nconst Workspace: FC<WorkspaceProps> = ({\n  canvasRef,\n  currentTool,\n  fetchPainting,\n  isFetching,\n  isSaving,\n  person,\n  savePainting,\n  setCurrentTool,\n  signOut,\n}) => (\n  <div className=\"workspace\">\n    <header className=\"header\">\n      <h2 className=\"current-user\">\n        Signed in as {person.name() || 'nameless person'}\n      </h2>\n      <Button onClick={signOut}>Sign out</Button>\n    </header>\n    <div className=\"stage\">\n      <Canvas\n        canvasRef={canvasRef}\n        currentTool={currentTool}\n        fetchPainting={fetchPainting}\n      />\n      {isFetching && (\n        <div className=\"canvas-guard guard\">\n          <Loader />\n        </div>\n      )}\n    </div>\n    <footer className=\"footer\">\n      <Tools currentTool={currentTool} setCurrentTool={setCurrentTool} />\n      <Button onClick={savePainting} disabled={isSaving}>\n        Save\n      </Button>\n    </footer>\n  </div>\n);\n\nexport default Workspace;\n","import React, { FC, MouseEvent } from 'react';\n\nimport Button from '../button';\n\nimport './style.css';\n\nimport logo from '../../logo.svg';\n\ntype SplashProps = {\n  signIn: (event: MouseEvent<HTMLButtonElement>) => void;\n};\n\nconst Splash: FC<SplashProps> = ({ signIn }) => (\n  <header className=\"splash\">\n    <img src={logo} className=\"splash-logo\" alt=\"logo\" />\n    <Button onClick={signIn}>Sign in/up with Blockstack</Button>\n  </header>\n);\n\nexport default Splash;\n","import React, { useState, MouseEvent, useRef, useEffect } from 'react';\nimport { AppConfig, Person, UserSession } from 'blockstack';\n\nimport Workspace from '../workspace';\nimport Splash from '../splash';\nimport { ToolType } from '../tools';\n\nimport './style.css';\n\nconst appConfig = new AppConfig(['store_write', 'publish_data']);\nconst userSession = new UserSession({ appConfig });\n\nexport default function App() {\n  const [currentTool, setCurrentTool] = useState(ToolType.Paint);\n  const [isFetching, setIsFetching] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (!userSession.isSignInPending()) {\n      return;\n    }\n\n    userSession.handlePendingSignIn().then((/* userData */) => {\n      const { origin, pathname } = window.location;\n      window.location.assign(`${origin}${pathname}`);\n    });\n  });\n\n  function signIn(event: MouseEvent<HTMLButtonElement>) {\n    event.preventDefault();\n\n    /**\n     * @see: https://github.com/zone117x/blockstack-monero/blob/master/src/main.ts#L40-L46\n     */\n    const { origin, pathname } = window.location;\n    userSession.redirectToSignIn(\n      `${origin}${pathname}`,\n      `${origin}${pathname}manifest.json`,\n    );\n  }\n\n  function signOut(event: MouseEvent<HTMLButtonElement>) {\n    event.preventDefault();\n\n    userSession.signUserOut();\n    const { origin, pathname } = window.location;\n    window.location.assign(`${origin}${pathname}`);\n  }\n\n  function fetchPainting() {\n    const { current } = canvasRef;\n\n    setIsFetching(true);\n    return (!current\n      ? Promise.resolve(JSON.stringify({}))\n      : userSession.getFile('painting.json', {\n          decrypt: false,\n        })\n    ).then(file => {\n      setIsFetching(false);\n      return file as string;\n    });\n  }\n\n  function savePainting(event: MouseEvent<HTMLButtonElement>) {\n    event.preventDefault();\n\n    const { current } = canvasRef;\n    if (!current) {\n      return;\n    }\n\n    setIsSaving(true);\n    userSession\n      .putFile(\n        'painting.json',\n        JSON.stringify({\n          data: current.toDataURL('image/png'),\n          createdAt: Date.now(),\n        }),\n        {\n          encrypt: false,\n        },\n      )\n      .then(() => {\n        setIsSaving(false);\n      });\n  }\n\n  return (\n    <div className=\"app\">\n      {userSession.isUserSignedIn() ? (\n        <Workspace\n          currentTool={currentTool}\n          canvasRef={canvasRef}\n          fetchPainting={fetchPainting}\n          isFetching={isFetching}\n          isSaving={isSaving}\n          person={new Person(userSession.loadUserData().profile)}\n          savePainting={savePainting}\n          setCurrentTool={setCurrentTool}\n          signOut={signOut}\n        />\n      ) : (\n        <Splash signIn={signIn} />\n      )}\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/app';\nimport * as serviceWorker from './service-worker';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}